import { useState, useEffect } from "react";
import AnchorLink from "react-anchor-link-smooth-scroll";
import useMediaQuery from "../hooks/useMediaQuery";
import menuOpen from "../assets/menu-icon.svg";
import menuClose from "../assets/close-icon.svg";

const Link = ({ page, selectedPage, setSelectedPage, closeMenu }) => {
  const lowerCasePage = page.toLowerCase();
  const handleClick = () => {
    const section = document.getElementById(lowerCasePage);
    if (section) {
      section.scrollIntoView({ behavior: "smooth" });
      setSelectedPage(lowerCasePage);
      closeMenu();
    }
  };
  return (
    <a
      className={`${
        selectedPage === lowerCasePage ? "text-yellow" : ""
      } hover:text-yellow transition duration-500 cursor-pointer`}
      onClick={handleClick}
    >
      {page}
    </a>
  );
};

const Navbar = ({ isTopOfPage, selectedPage, setSelectedPage }) => {
  const [isMenuToggled, setIsMenuToggled] = useState(false);
  const [isScrolled, setIsScrolled] = useState(false);
  const isDesktop = useMediaQuery("(min-width: 768px)");

  useEffect(() => {
    const handleScroll = () => {
      console.log("scrollY:", window.scrollY); // Logowanie scrollY
      if (window.scrollY > 50) {
        setIsScrolled(true);
      } else {
        setIsScrolled(false);
      }
    };

    window.addEventListener("scroll", handleScroll);
    handleScroll();
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);
  console.log(isScrolled);
  const navbarBackground = isScrolled ? "bg-deepBlue" : "";

  // Funkcja do zamykania menu
  const closeMenu = () => {
    setIsMenuToggled(false);
  };

  return (
    // <nav
    //   className={`${navbarBackground} z-40 w-full fixed top-0 py-6 transition-all`}
    // >
    <nav
      className={`${
        isScrolled ? "bg-deepBlue" : ""
      } z-40 w-full fixed top-0 py-6 transition-all`}
    >
      <div className="flex items-center justify-between mx-auto w-5/6">
        <h4 className="font-playfair text-3xl font-bold">Tablo Aqua Fitness</h4>

        {/* DESKTOP NAV */}
        {isDesktop ? (
          <div className="flex justify-between gap-16 font-opensans text-sm font-semibold">
            <Link
              page="Start"
              selectedPage={selectedPage}
              setSelectedPage={setSelectedPage}
              closeMenu={closeMenu}
            />
            <Link
              page="Cele"
              selectedPage={selectedPage}
              setSelectedPage={setSelectedPage}
              closeMenu={closeMenu}
            />
            <Link
              page="Foto-teka"
              selectedPage={selectedPage}
              setSelectedPage={setSelectedPage}
              closeMenu={closeMenu}
            />
            <Link
              page="Uczestnicy"
              selectedPage={selectedPage}
              setSelectedPage={setSelectedPage}
              closeMenu={closeMenu}
            />
            <Link
              page="Kontakt"
              selectedPage={selectedPage}
              setSelectedPage={setSelectedPage}
              closeMenu={closeMenu}
            />
          </div>
        ) : (
          <button
            className="rounded-full bg-red p-2"
            onClick={() => setIsMenuToggled(!isMenuToggled)}
          >
            <img alt="menu-icon" src={menuOpen} />
          </button>
        )}

        {/* MOBILE MENU POPUP */}
        {!isDesktop && isMenuToggled && (
          <div className="fixed right-0 bottom-0 h-full bg-blue w-[300px]">
            {/* CLOSE ICON */}
            <div className="flex justify-end p-12">
              <button onClick={() => setIsMenuToggled(!isMenuToggled)}>
                <img alt="menu-icon" src={menuClose} />
              </button>
            </div>
            {/* MENU ITEMS */}
            <div className="flex flex-col gap-10 ml-[33%] text-2xl text-deep-blue">
              <Link
                page="Start"
                selectedPage={selectedPage}
                setSelectedPage={setSelectedPage}
                closeMenu={closeMenu}
              />
              <Link
                page="Cele"
                selectedPage={selectedPage}
                setSelectedPage={setSelectedPage}
                closeMenu={closeMenu}
              />
              <Link
                page="Foto-teka"
                selectedPage={selectedPage}
                setSelectedPage={setSelectedPage}
                closeMenu={closeMenu}
              />
              <Link
                page="Uczestnicy"
                selectedPage={selectedPage}
                setSelectedPage={setSelectedPage}
                closeMenu={closeMenu}
              />
              <Link
                page="Kontakt"
                selectedPage={selectedPage}
                setSelectedPage={setSelectedPage}
                closeMenu={closeMenu}
              />
            </div>
          </div>
        )}
      </div>
    </nav>
  );
};

export default Navbar;


---------------------------------------------

@import url("https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Playfair+Display:wght@400;600&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

html,
body,
#root,
.app {
  height: 100%;
  background: #010026;
  scroll-behavior: smooth;
  @apply text-white;
  overflow-x: hidden;
}
html,
body {
  height: 100%;
  margin: 0;
  overflow: auto;
}
body {
  min-height: 2000px;
}


---------------------------------------------

import { useState, useEffect } from "react";
import debounce from "lodash.debounce";

import useMediaQuery from "../hooks/useMediaQuery";
import menuOpen from "../assets/menu-icon.svg";
import menuClose from "../assets/close-icon.svg";

const Link = ({ page, selectedPage, setSelectedPage, closeMenu }) => {
  const lowerCasePage = page.toLowerCase();
  const handleClick = () => {
    const section = document.getElementById(lowerCasePage);
    if (section) {
      section.scrollIntoView({ behavior: "smooth" });
      setSelectedPage(lowerCasePage);
      closeMenu();
    }
  };
  return (
    <a
      className={`${
        selectedPage === lowerCasePage ? "text-yellow" : ""
      } hover:text-yellow transition duration-500 cursor-pointer`}
      onClick={handleClick}
    >
      {page}
    </a>
  );
};

const Navbar = ({ isTopOfPage, selectedPage, setSelectedPage }) => {
  const [isMenuToggled, setIsMenuToggled] = useState(false);
  const [isScrolled, setIsScrolled] = useState(false);
  const [isTopOfPage, setIsTopOfPage] = useState(true);
  const isDesktop = useMediaQuery("(min-width: 768px)");

  useEffect(() => {
    const handleScroll = () => {
      // Jeżeli jesteśmy na samej górze strony, ustawiamy isTopOfPage na true
      setIsTopOfPage(window.scrollY === 0);
    };

    window.addEventListener("scroll", handleScroll); // Nasłuchuj zdarzenia scroll
    handleScroll(); // Inicjalizuj przy załadowaniu strony

    return () => window.removeEventListener("scroll", handleScroll); // Posprzątaj po komponencie
  }, []);

  const navbarBackground = isTopOfPage ? "" : "bg-red";

  // Funkcja do zamykania menu
  const closeMenu = () => {
    setIsMenuToggled(false);
  };

  return (
    // <nav
    //   className={`${navbarBackground} z-40 w-full fixed top-0 py-6 transition-all`}
    // >
    <nav
      className={`${
        isScrolled ? "bg-deepBlue" : ""
      } z-40 w-full fixed top-0 py-6 transition-bg`}
    >
      <div className="flex items-center justify-between mx-auto w-5/6">
        <h4 className="font-playfair text-3xl font-bold">Tablo Aqua Fitness</h4>

        {/* DESKTOP NAV */}
        {isDesktop ? (
          <div className="flex justify-between gap-16 font-opensans text-sm font-semibold">
            <Link
              page="Start"
              selectedPage={selectedPage}
              setSelectedPage={setSelectedPage}
              closeMenu={closeMenu}
            />
            <Link
              page="Cele"
              selectedPage={selectedPage}
              setSelectedPage={setSelectedPage}
              closeMenu={closeMenu}
            />
            <Link
              page="Foto-teka"
              selectedPage={selectedPage}
              setSelectedPage={setSelectedPage}
              closeMenu={closeMenu}
            />
            <Link
              page="Uczestnicy"
              selectedPage={selectedPage}
              setSelectedPage={setSelectedPage}
              closeMenu={closeMenu}
            />
            <Link
              page="Kontakt"
              selectedPage={selectedPage}
              setSelectedPage={setSelectedPage}
              closeMenu={closeMenu}
            />
          </div>
        ) : (
          <button
            className="rounded-full bg-red p-2"
            onClick={() => setIsMenuToggled(!isMenuToggled)}
          >
            <img alt="menu-icon" src={menuOpen} />
          </button>
        )}

        {/* MOBILE MENU POPUP */}
        {!isDesktop && isMenuToggled && (
          <div className="fixed right-0 bottom-0 h-full bg-blue w-[300px]">
            {/* CLOSE ICON */}
            <div className="flex justify-end p-12">
              <button onClick={() => setIsMenuToggled(!isMenuToggled)}>
                <img alt="menu-icon" src={menuClose} />
              </button>
            </div>
            {/* MENU ITEMS */}
            <div className="flex flex-col gap-10 ml-[33%] text-2xl text-deep-blue">
              <Link
                page="Start"
                selectedPage={selectedPage}
                setSelectedPage={setSelectedPage}
                closeMenu={closeMenu}
              />
              <Link
                page="Cele"
                selectedPage={selectedPage}
                setSelectedPage={setSelectedPage}
                closeMenu={closeMenu}
              />
              <Link
                page="Foto-teka"
                selectedPage={selectedPage}
                setSelectedPage={setSelectedPage}
                closeMenu={closeMenu}
              />
              <Link
                page="Uczestnicy"
                selectedPage={selectedPage}
                setSelectedPage={setSelectedPage}
                closeMenu={closeMenu}
              />
              <Link
                page="Kontakt"
                selectedPage={selectedPage}
                setSelectedPage={setSelectedPage}
                closeMenu={closeMenu}
              />
            </div>
          </div>
        )}
      </div>
    </nav>
  );
};

export default Navbar;



---------------------------------------------

import React from "react";
import { IoClose } from "react-icons/io5"; // Ikona zamknięcia

function PrivacyPolicy({ onClose }) {
  return (
    <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50">
      <div className="bg-white p-6 max-w-3xl mx-auto shadow-md rounded-md relative">
        {/* Przycisk zamknięcia */}
        <button
          className="absolute top-2 right-2 text-gray-600 hover:text-gray-800"
          onClick={onClose}
        >
          <IoClose size={30} />
        </button>

        <h2 className="text-2xl font-semibold text-gray-800 mb-4">
          Polityka Prywatności
        </h2>
        <p className="text-gray-700 mb-4">
          Szanujemy Twoją prywatność i przykładamy dużą wagę do ochrony Twoich
          danych osobowych. Nasza Polityka Prywatności opisuje, jakie informacje
          zbieramy, w jaki sposób je wykorzystujemy, komu możemy je udostępniać
          oraz jakie masz prawa w związku z przetwarzaniem Twoich danych.
        </p>
        <h3 className="text-xl font-semibold text-gray-800 mt-6 mb-2">
          1. Jakie dane zbieramy?
        </h3>
        <p className="text-gray-700 mb-4">
          Zbieramy tylko te dane, które są niezbędne do realizacji naszych
          usług, takie jak dane kontaktowe, dane związane z formularzami czy
          dane dotyczące korzystania z naszej strony internetowej.
        </p>
        <h3 className="text-xl font-semibold text-gray-800 mt-6 mb-2">
          2. Jak wykorzystujemy Twoje dane?
        </h3>
        <p className="text-gray-700 mb-4">
          Twoje dane osobowe są wykorzystywane w celu realizacji usług, obsługi
          klienta, personalizacji treści, komunikacji oraz zapewnienia zgodności
          z obowiązującymi przepisami prawa.
        </p>
        <h3 className="text-xl font-semibold text-gray-800 mt-6 mb-2">
          3. Komu możemy udostępniać Twoje dane?
        </h3>
        <p className="text-gray-700 mb-4">
          Twoje dane mogą być udostępniane naszym partnerom, dostawcom usług
          oraz innym stronom trzecim, jeżeli jest to konieczne do realizacji
          naszych zobowiązań.
        </p>
        <h3 className="text-xl font-semibold text-gray-800 mt-6 mb-2">
          4. Twoje prawa
        </h3>
        <p className="text-gray-700 mb-4">
          Masz prawo dostępu do swoich danych, ich poprawiania, usunięcia, a
          także prawo do wycofania zgody na ich przetwarzanie. Możesz także
          zgłosić sprzeciw wobec przetwarzania danych.
        </p>
        <a
          href="/"
          className="text-deepBlue hover:text-dark-grey mt-4 inline-block text-lg transition-colors duration-300 ease-in-out"
        >
          Powrót do strony głównej
        </a>
      </div>
    </div>
  );
}

export default PrivacyPolicy;
